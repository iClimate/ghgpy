{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This site contains the project documentation for the Unit Converter Python component. Its aim is to provide you with a simple solution for converting various units. Table Of Contents Documentation consists of four separate parts: 1. About 2. Getting Started 3. Reference 4. Patch History 5. License Quickly find what you're looking for depending on your use case by looking at the different pages. Project Overview Do GHG Inventoy and more. Modules exported by this package: ghgpy : Provide ghg accounting framework.","title":"Home"},{"location":"#table-of-contents","text":"Documentation consists of four separate parts: 1. About 2. Getting Started 3. Reference 4. Patch History 5. License Quickly find what you're looking for depending on your use case by looking at the different pages.","title":"Table Of Contents"},{"location":"#project-overview","text":"Do GHG Inventoy and more. Modules exported by this package: ghgpy : Provide ghg accounting framework.","title":"Project Overview"},{"location":"about/","text":"Unit Converter is a simple Python package, allowing you to perform various unit conversions This component is lightweight, high performance and does not require any additional dependencies. For more information on how to start using the package, check: Getting Started","title":"About"},{"location":"getting_started/","text":"How To Convert Units? The converter Python package helps you perform various unit conversions. Before using the package, you need to install it on your system. You can do it by using pip: pip install python-unitconverterermac Inside of your python script you can now import the converter from the unitconverter package: # your_script.py from unitconverter import converter After you've imported the package, you can use it to perform various unit conversions: # your_script.py from unitconverter import converter print(converter.convertLength(20, \"m\", \"cm\")) # OUTPUT: 200.0 print(converter.convertWeight(5, \"kilogram\", \"g\")) # OUTPUT: 5000.0 You can also import conversion functions for specific units: # your_script.py from unitconverter.converter import convertLength You can then call the specific function to convert units: # your_script.py from unitconverter.converter import convertLength print(convertLength(5, \"meter\", \"centimeter\")) # OUTPUT: 500.0 Modules available for conversion include: convertLength , convertWeight , convertVolume , convertPressure , convertEnergy , convertData , convertSpeed , convertTime , convertTemperature","title":"Getting Started"},{"location":"getting_started/#how-to-convert-units","text":"The converter Python package helps you perform various unit conversions. Before using the package, you need to install it on your system. You can do it by using pip: pip install python-unitconverterermac Inside of your python script you can now import the converter from the unitconverter package: # your_script.py from unitconverter import converter After you've imported the package, you can use it to perform various unit conversions: # your_script.py from unitconverter import converter print(converter.convertLength(20, \"m\", \"cm\")) # OUTPUT: 200.0 print(converter.convertWeight(5, \"kilogram\", \"g\")) # OUTPUT: 5000.0 You can also import conversion functions for specific units: # your_script.py from unitconverter.converter import convertLength You can then call the specific function to convert units: # your_script.py from unitconverter.converter import convertLength print(convertLength(5, \"meter\", \"centimeter\")) # OUTPUT: 500.0 Modules available for conversion include: convertLength , convertWeight , convertVolume , convertPressure , convertEnergy , convertData , convertSpeed , convertTime , convertTemperature","title":"How To Convert Units?"},{"location":"license/","text":"MIT License Copyright (c) 2023 Unit Converter Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"patch_history/","text":"1.0.0 Initial release","title":"Patch History"},{"location":"reference/","text":"This page contains in-depth documentation of unitconverter package. Use it as a reference for the technical implementation of the converter project code. iClimate - ghgpy Fuel objects Represent a amount of a specific fuel (C) Bui Khac Tu (bkt92) (C) iClimate BaseFuel Base Fuel Object (use for all kind of fuel) Representative by TJ Allow \"+, -\" operators with the same kind of fuel Allow convert to different property (Weight, Volume, Carbon Content) Source code in src\\ghgpy\\datamodel\\fuel.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 class BaseFuel : \"\"\" Base Fuel Object (use for all kind of fuel) \\n Representative by TJ \\n Allow \"+, -\" operators with the same kind of fuel \\n Allow convert to different property (Weight, Volume, Carbon Content) \"\"\" # Init attributes of fuel def __init__ ( self , name : str , desc : str , ncv : float , ccf : float , \\ density : float , amount : float , unit : str ): properties = FuelProperties ( desc = desc , ncv = ncv , ccf = ccf , density = density ) self . data = FuelData ( name = name , amount = amount , unit = self . _is_valid_unit ( unit ), properties = properties ) # Validate unit def _is_valid_unit ( self , unit ): if not (( unit in weigh_units . units ) or ( unit in volume_units . units )): raise ValueError ( \"Invalid Unit.\" ) return unit # Convert to TJ def to_tj ( self ): ''' Energy of Fuel ''' if any ( x == None for x in [ self . data . amount , self . data . properties . ncv ]): return None if type ( self . data . amount ) == tuple : amount = ufloat ( self . data . amount ) else : amount = self . data . amount if type ( self . data . properties . ncv ) == tuple : ncv = ufloat ( self . data . properties . ncv ) else : ncv = self . data . properties . ncv if self . data . unit in weigh_units . units : return weigh_units . convert ( amount , self . data . unit , 'Gg' ) * ncv if self . data . unit in volume_units . units : if self . data . properties . density == None : return None else : if type ( self . data . properties . density ) == tuple : density = ufloat ( self . data . properties . density ) else : density = self . data . properties . density return weigh_units . convert ( volume_units . convert ( amount , self . data . unit , 'm3' ) \\ * density , 'kg' , 'Gg' ) * ncv # Convert to kg def to_kg ( self ): ''' Weight of Fuel ''' if type ( self . data . amount ) == tuple : amount = ufloat ( self . data . amount ) else : amount = self . data . amount if self . data . unit in weigh_units . units : return weigh_units . convert ( amount , self . data . unit , 'kg' ) if self . data . unit in volume_units . units : if self . data . properties . density == None : return None else : if type ( self . data . properties . density ) == tuple : density = ufloat ( self . data . properties . density ) else : density = self . data . properties . density return volume_units . convert ( amount , self . data . unit , 'm3' ) * density # Convert carbon content (kg) def to_cc ( self ): ''' Carbon content of Fuel ''' if self . data . properties . ccf == None : return None else : if type ( self . data . properties . ccf ) == tuple : ccf = ufloat ( self . data . properties . ccf ) else : ccf = self . data . properties . ccf return 1000 * self . to_tj () * ccf # Convert to volume (litre) def to_litre ( self ): ''' Volume of Fuel ''' if type ( self . data . amount ) == tuple : amount = ufloat ( self . data . amount ) else : amount = self . data . amount if self . data . unit in weigh_units . units : if self . data . properties . density == None : return None else : if type ( self . data . properties . density ) == tuple : density = ufloat ( self . data . properties . density ) else : density = self . data . properties . density return 1000 * weigh_units . convert ( amount , self . data . unit , 'kg' ) / density if self . data . unit in volume_units . units : return volume_units . convert ( amount , self . data . unit , 'litre' ) # Check two object have enough fuel data def _check_fuel ( self , other ): if not isinstance ( other , BaseFuel ): return NotImplemented if ( self . data . name , self . data . properties . desc , self . data . properties . ncv , self . data . properties . density ) == \\ ( other . data . name , other . data . properties . desc , other . data . properties . ncv , other . data . properties . density ): return True else : return False # Convert data to dict def to_dict ( self , properties = True ): if properties : return self . data . dict () else : data = self . data . dict () data . pop ( \"properties\" ) return data # Return to tj (energy of fuel) def __repr__ ( self ) -> str : return ( 'fuel(' f 'name= { self . data . name !r} , amount= { self . to_tj () !r} Tj)' ) def __hash__ ( self ) -> int : return hash (( self . data . name , self . data . properties . desc , self . to_tj (), self . data . properties . ncv )) def __eq__ ( self , other ) -> bool : if not isinstance ( other , BaseFuel ): return NotImplemented return ( ( self . data . name , self . to_tj (), self . data . properties . ncv ) == ( other . data . name , other . to_tj (), other . data . properties . ncv )) def __add__ ( self , other ) -> float : if not isinstance ( other , BaseFuel ): return NotImplemented if self . _check_fuel ( other ): if type ( self . to_kg ()) == ufloat : amount = self . to_kg () + other . to_kg () return BaseFuel ( self . data . name , self . data . properties . desc , self . data . properties . ncv , self . data . properties . ccf , \\ self . data . properties . density , ( amount . value , amount . uncertainty ) , \"kg\" ) else : return BaseFuel ( self . data . name , self . data . properties . desc , self . data . properties . ncv , self . data . properties . ccf , \\ self . data . properties . density , self . to_kg () + other . to_kg (), \"kg\" ) else : return NotImplemented def __sub__ ( self , other ) -> float : if not isinstance ( other , BaseFuel ): return NotImplemented if self . _check_fuel ( other ): if type ( self . to_kg ()) == ufloat : amount = self . to_kg () - other . to_kg () return BaseFuel ( self . data . name , self . data . properties . desc , self . data . properties . ncv , self . data . properties . ccf , \\ self . data . properties . density , ( amount . value , amount . uncertainty ) , \"kg\" ) else : return BaseFuel ( self . data . name , self . data . properties . desc , self . data . properties . ncv , self . data . properties . ccf , \\ self . data . properties . density , self . to_kg () - other . to_kg (), \"kg\" ) else : return NotImplemented # Load fuel from json file @classmethod def from_dict ( cls , data ): ''' Load json file to fuel class schema: { name: Name/code of fuel, amount: Amount of fuel (unit), unit: Unit of amount fuel, properties: { desc: More information about fuel ncv: Net calorific value (Tj/Gg) ccf: Carbon content of fuel (kg/GJ) density: Density of fuel (kg/m3) } } ''' return cls ( data [ \"name\" ], data [ \"properties\" ][ 'desc' ], data [ \"properties\" ][ 'ncv' ], \\ data [ \"properties\" ][ 'ccf' ], data [ \"properties\" ][ 'density' ], data [ \"amount\" ], data [ \"unit\" ]) from_dict ( data ) classmethod Load json file to fuel class schema: { name: Name/code of fuel, amount: Amount of fuel (unit), unit: Unit of amount fuel, properties: { desc: More information about fuel ncv: Net calorific value (Tj/Gg) ccf: Carbon content of fuel (kg/GJ) density: Density of fuel (kg/m3) } } Source code in src\\ghgpy\\datamodel\\fuel.py 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 @classmethod def from_dict ( cls , data ): ''' Load json file to fuel class schema: { name: Name/code of fuel, amount: Amount of fuel (unit), unit: Unit of amount fuel, properties: { desc: More information about fuel ncv: Net calorific value (Tj/Gg) ccf: Carbon content of fuel (kg/GJ) density: Density of fuel (kg/m3) } } ''' return cls ( data [ \"name\" ], data [ \"properties\" ][ 'desc' ], data [ \"properties\" ][ 'ncv' ], \\ data [ \"properties\" ][ 'ccf' ], data [ \"properties\" ][ 'density' ], data [ \"amount\" ], data [ \"unit\" ]) to_cc () Carbon content of Fuel Source code in src\\ghgpy\\datamodel\\fuel.py 98 99 100 101 102 103 104 105 106 107 108 109 def to_cc ( self ): ''' Carbon content of Fuel ''' if self . data . properties . ccf == None : return None else : if type ( self . data . properties . ccf ) == tuple : ccf = ufloat ( self . data . properties . ccf ) else : ccf = self . data . properties . ccf return 1000 * self . to_tj () * ccf to_kg () Weight of Fuel Source code in src\\ghgpy\\datamodel\\fuel.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def to_kg ( self ): ''' Weight of Fuel ''' if type ( self . data . amount ) == tuple : amount = ufloat ( self . data . amount ) else : amount = self . data . amount if self . data . unit in weigh_units . units : return weigh_units . convert ( amount , self . data . unit , 'kg' ) if self . data . unit in volume_units . units : if self . data . properties . density == None : return None else : if type ( self . data . properties . density ) == tuple : density = ufloat ( self . data . properties . density ) else : density = self . data . properties . density return volume_units . convert ( amount , self . data . unit , 'm3' ) * density to_litre () Volume of Fuel Source code in src\\ghgpy\\datamodel\\fuel.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 def to_litre ( self ): ''' Volume of Fuel ''' if type ( self . data . amount ) == tuple : amount = ufloat ( self . data . amount ) else : amount = self . data . amount if self . data . unit in weigh_units . units : if self . data . properties . density == None : return None else : if type ( self . data . properties . density ) == tuple : density = ufloat ( self . data . properties . density ) else : density = self . data . properties . density return 1000 * weigh_units . convert ( amount , self . data . unit , 'kg' ) / density if self . data . unit in volume_units . units : return volume_units . convert ( amount , self . data . unit , 'litre' ) to_tj () Energy of Fuel Source code in src\\ghgpy\\datamodel\\fuel.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 def to_tj ( self ): ''' Energy of Fuel ''' if any ( x == None for x in [ self . data . amount , self . data . properties . ncv ]): return None if type ( self . data . amount ) == tuple : amount = ufloat ( self . data . amount ) else : amount = self . data . amount if type ( self . data . properties . ncv ) == tuple : ncv = ufloat ( self . data . properties . ncv ) else : ncv = self . data . properties . ncv if self . data . unit in weigh_units . units : return weigh_units . convert ( amount , self . data . unit , 'Gg' ) * ncv if self . data . unit in volume_units . units : if self . data . properties . density == None : return None else : if type ( self . data . properties . density ) == tuple : density = ufloat ( self . data . properties . density ) else : density = self . data . properties . density return weigh_units . convert ( volume_units . convert ( amount , self . data . unit , 'm3' ) \\ * density , 'kg' , 'Gg' ) * ncv DefaultFuel Bases: BaseFuel amount: amount of fuel unit: unit of fuel Data Sources: Calorific value: 2006 IPCC Guidelines for National Greenhouse Gas Inventories V2_Ch1 - TABLE 1.2: https://www.ipcc-nggip.iges.or.jp/public/2006gl/pdf/2_Volume2/V2_1_Ch1_Introduction.pdf Density: IEA Database documentation: https://wds.iea.org/wds/pdf/oil_documentation.pdf Source code in src\\ghgpy\\datamodel\\fuel.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 class DefaultFuel ( BaseFuel ): ''' `amount: amount of fuel`\\n `unit: unit of fuel` ------------- Data Sources: \\n Calorific value: 2006 IPCC Guidelines for National Greenhouse Gas Inventories V2_Ch1 - TABLE 1.2: https://www.ipcc-nggip.iges.or.jp/public/2006gl/pdf/2_Volume2/V2_1_Ch1_Introduction.pdf \\n Density: IEA Database documentation: https://wds.iea.org/wds/pdf/oil_documentation.pdf \\n ''' def __init__ ( self , database , fuel , amount , unit ): if fuel not in database . keys (): raise ValueError ( \"Invalid Unit.\" ) super () . __init__ ( fuel , database [ fuel ][ 'desc' ], database [ fuel ][ 'ncv' ], \\ database [ fuel ][ 'ccf' ], database [ fuel ][ 'density' ], amount , unit ) # Load fuel from json file @classmethod def from_json ( cls , data ): ''' Load json file to fuel class Schema: { name: Name/code of fuel, amount: amount of fuel (unit), unit: unit of amount fuel } ''' return cls ( data [ \"name\" ], data [ \"amount\" ], data [ \"unit\" ]) def dict_to_fuel ( data , database ): ''' Schema: Class FuelData Load json file to fuel class schema: { name: Name/code of fuel, amount: Amount of fuel (unit), unit: Unit of amount fuel, properties: { desc: More information about fuel ncv: Net calorific value (Tj/Gg) ccf: Carbon content of fuel (kg/GJ) density: Density of fuel (kg/m3) } } ''' _required_data = [ 'name' , 'amount' , 'unit' ] _attributes_list = set ([ 'desc' , 'ncv' , 'ccf' , 'density' ]) if not all ( x in data . keys () for x in _required_data ): raise ValueError ( \"Invalid data, missing fields!\" ) elif not \"custom\" in data . keys (): if not data [ \"name\" ] in database . keys (): raise ValueError ( \"Invalid data, fuel name not found in default fuel list!\" ) else : fuel = data [ \"name\" ] return DefaultFuel ( data [ \"name\" ], data [ \"amount\" ], data [ \"unit\" ]) else : if all ( x in data [ \"custom\" ] . keys () for x in _attributes_list ): return BaseFuel ( data [ \"name\" ], data [ \"custom\" ][ 'desc' ], data [ \"custom\" ][ 'ncv' ], \\ data [ \"custom\" ][ 'ccf' ], data [ \"custom\" ][ 'density' ], data [ \"amount\" ], data [ \"unit\" ]) elif not data [ \"name\" ] in database . keys (): raise ValueError ( \"Invalid data, missing atribute which can not get from default fuel list!\" ) else : fuel = data [ \"name\" ] input = {} for i in _attributes_list . difference ( data [ \"custom\" ] . keys ()): input [ i ] = database [ fuel ][ i ] for i in data [ \"custom\" ] . keys (): input [ i ] = data [ \"custom\" ][ i ] return BaseFuel ( data [ \"name\" ], input [ 'desc' ], input [ 'ncv' ], \\ input [ 'ccf' ], input [ 'density' ], data [ \"amount\" ], data [ \"unit\" ]) dict_to_fuel ( data , database ) Schema: Class FuelData Load json file to fuel class schema: { name: Name/code of fuel, amount: Amount of fuel (unit), unit: Unit of amount fuel, properties: { desc: More information about fuel ncv: Net calorific value (Tj/Gg) ccf: Carbon content of fuel (kg/GJ) density: Density of fuel (kg/m3) } } Source code in src\\ghgpy\\datamodel\\fuel.py 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 def dict_to_fuel ( data , database ): ''' Schema: Class FuelData Load json file to fuel class schema: { name: Name/code of fuel, amount: Amount of fuel (unit), unit: Unit of amount fuel, properties: { desc: More information about fuel ncv: Net calorific value (Tj/Gg) ccf: Carbon content of fuel (kg/GJ) density: Density of fuel (kg/m3) } } ''' _required_data = [ 'name' , 'amount' , 'unit' ] _attributes_list = set ([ 'desc' , 'ncv' , 'ccf' , 'density' ]) if not all ( x in data . keys () for x in _required_data ): raise ValueError ( \"Invalid data, missing fields!\" ) elif not \"custom\" in data . keys (): if not data [ \"name\" ] in database . keys (): raise ValueError ( \"Invalid data, fuel name not found in default fuel list!\" ) else : fuel = data [ \"name\" ] return DefaultFuel ( data [ \"name\" ], data [ \"amount\" ], data [ \"unit\" ]) else : if all ( x in data [ \"custom\" ] . keys () for x in _attributes_list ): return BaseFuel ( data [ \"name\" ], data [ \"custom\" ][ 'desc' ], data [ \"custom\" ][ 'ncv' ], \\ data [ \"custom\" ][ 'ccf' ], data [ \"custom\" ][ 'density' ], data [ \"amount\" ], data [ \"unit\" ]) elif not data [ \"name\" ] in database . keys (): raise ValueError ( \"Invalid data, missing atribute which can not get from default fuel list!\" ) else : fuel = data [ \"name\" ] input = {} for i in _attributes_list . difference ( data [ \"custom\" ] . keys ()): input [ i ] = database [ fuel ][ i ] for i in data [ \"custom\" ] . keys (): input [ i ] = data [ \"custom\" ][ i ] return BaseFuel ( data [ \"name\" ], input [ 'desc' ], input [ 'ncv' ], \\ input [ 'ccf' ], input [ 'density' ], data [ \"amount\" ], data [ \"unit\" ]) from_json ( data ) classmethod Load json file to fuel class Schema: { name: Name/code of fuel, amount: amount of fuel (unit), unit: unit of amount fuel } Source code in src\\ghgpy\\datamodel\\fuel.py 240 241 242 243 244 245 246 247 248 249 250 251 @classmethod def from_json ( cls , data ): ''' Load json file to fuel class Schema: { name: Name/code of fuel, amount: amount of fuel (unit), unit: unit of amount fuel } ''' return cls ( data [ \"name\" ], data [ \"amount\" ], data [ \"unit\" ])","title":"Reference"},{"location":"reference/#src.ghgpy.datamodel.fuel.BaseFuel","text":"Base Fuel Object (use for all kind of fuel) Representative by TJ Allow \"+, -\" operators with the same kind of fuel Allow convert to different property (Weight, Volume, Carbon Content) Source code in src\\ghgpy\\datamodel\\fuel.pyclass BaseFuel : \"\"\" Base Fuel Object (use for all kind of fuel) \\n Representative by TJ \\n Allow \"+, -\" operators with the same kind of fuel \\n Allow convert to different property (Weight, Volume, Carbon Content) \"\"\" # Init attributes of fuel def __init__ ( self , name : str , desc : str , ncv : float , ccf : float , \\ density : float , amount : float , unit : str ): properties = FuelProperties ( desc = desc , ncv = ncv , ccf = ccf , density = density ) self . data = FuelData ( name = name , amount = amount , unit = self . _is_valid_unit ( unit ), properties = properties ) # Validate unit def _is_valid_unit ( self , unit ): if not (( unit in weigh_units . units ) or ( unit in volume_units . units )): raise ValueError ( \"Invalid Unit.\" ) return unit # Convert to TJ def to_tj ( self ): ''' Energy of Fuel ''' if any ( x == None for x in [ self . data . amount , self . data . properties . ncv ]): return None if type ( self . data . amount ) == tuple : amount = ufloat ( self . data . amount ) else : amount = self . data . amount if type ( self . data . properties . ncv ) == tuple : ncv = ufloat ( self . data . properties . ncv ) else : ncv = self . data . properties . ncv if self . data . unit in weigh_units . units : return weigh_units . convert ( amount , self . data . unit , 'Gg' ) * ncv if self . data . unit in volume_units . units : if self . data . properties . density == None : return None else : if type ( self . data . properties . density ) == tuple : density = ufloat ( self . data . properties . density ) else : density = self . data . properties . density return weigh_units . convert ( volume_units . convert ( amount , self . data . unit , 'm3' ) \\ * density , 'kg' , 'Gg' ) * ncv # Convert to kg def to_kg ( self ): ''' Weight of Fuel ''' if type ( self . data . amount ) == tuple : amount = ufloat ( self . data . amount ) else : amount = self . data . amount if self . data . unit in weigh_units . units : return weigh_units . convert ( amount , self . data . unit , 'kg' ) if self . data . unit in volume_units . units : if self . data . properties . density == None : return None else : if type ( self . data . properties . density ) == tuple : density = ufloat ( self . data . properties . density ) else : density = self . data . properties . density return volume_units . convert ( amount , self . data . unit , 'm3' ) * density # Convert carbon content (kg) def to_cc ( self ): ''' Carbon content of Fuel ''' if self . data . properties . ccf == None : return None else : if type ( self . data . properties . ccf ) == tuple : ccf = ufloat ( self . data . properties . ccf ) else : ccf = self . data . properties . ccf return 1000 * self . to_tj () * ccf # Convert to volume (litre) def to_litre ( self ): ''' Volume of Fuel ''' if type ( self . data . amount ) == tuple : amount = ufloat ( self . data . amount ) else : amount = self . data . amount if self . data . unit in weigh_units . units : if self . data . properties . density == None : return None else : if type ( self . data . properties . density ) == tuple : density = ufloat ( self . data . properties . density ) else : density = self . data . properties . density return 1000 * weigh_units . convert ( amount , self . data . unit , 'kg' ) / density if self . data . unit in volume_units . units : return volume_units . convert ( amount , self . data . unit , 'litre' ) # Check two object have enough fuel data def _check_fuel ( self , other ): if not isinstance ( other , BaseFuel ): return NotImplemented if ( self . data . name , self . data . properties . desc , self . data . properties . ncv , self . data . properties . density ) == \\ ( other . data . name , other . data . properties . desc , other . data . properties . ncv , other . data . properties . density ): return True else : return False # Convert data to dict def to_dict ( self , properties = True ): if properties : return self . data . dict () else : data = self . data . dict () data . pop ( \"properties\" ) return data # Return to tj (energy of fuel) def __repr__ ( self ) -> str : return ( 'fuel(' f 'name= { self . data . name !r} , amount= { self . to_tj () !r} Tj)' ) def __hash__ ( self ) -> int : return hash (( self . data . name , self . data . properties . desc , self . to_tj (), self . data . properties . ncv )) def __eq__ ( self , other ) -> bool : if not isinstance ( other , BaseFuel ): return NotImplemented return ( ( self . data . name , self . to_tj (), self . data . properties . ncv ) == ( other . data . name , other . to_tj (), other . data . properties . ncv )) def __add__ ( self , other ) -> float : if not isinstance ( other , BaseFuel ): return NotImplemented if self . _check_fuel ( other ): if type ( self . to_kg ()) == ufloat : amount = self . to_kg () + other . to_kg () return BaseFuel ( self . data . name , self . data . properties . desc , self . data . properties . ncv , self . data . properties . ccf , \\ self . data . properties . density , ( amount . value , amount . uncertainty ) , \"kg\" ) else : return BaseFuel ( self . data . name , self . data . properties . desc , self . data . properties . ncv , self . data . properties . ccf , \\ self . data . properties . density , self . to_kg () + other . to_kg (), \"kg\" ) else : return NotImplemented def __sub__ ( self , other ) -> float : if not isinstance ( other , BaseFuel ): return NotImplemented if self . _check_fuel ( other ): if type ( self . to_kg ()) == ufloat : amount = self . to_kg () - other . to_kg () return BaseFuel ( self . data . name , self . data . properties . desc , self . data . properties . ncv , self . data . properties . ccf , \\ self . data . properties . density , ( amount . value , amount . uncertainty ) , \"kg\" ) else : return BaseFuel ( self . data . name , self . data . properties . desc , self . data . properties . ncv , self . data . properties . ccf , \\ self . data . properties . density , self . to_kg () - other . to_kg (), \"kg\" ) else : return NotImplemented # Load fuel from json file @classmethod def from_dict ( cls , data ): ''' Load json file to fuel class schema: { name: Name/code of fuel, amount: Amount of fuel (unit), unit: Unit of amount fuel, properties: { desc: More information about fuel ncv: Net calorific value (Tj/Gg) ccf: Carbon content of fuel (kg/GJ) density: Density of fuel (kg/m3) } } ''' return cls ( data [ \"name\" ], data [ \"properties\" ][ 'desc' ], data [ \"properties\" ][ 'ncv' ], \\ data [ \"properties\" ][ 'ccf' ], data [ \"properties\" ][ 'density' ], data [ \"amount\" ], data [ \"unit\" ])","title":"BaseFuel"},{"location":"reference/#src.ghgpy.datamodel.fuel.BaseFuel.from_dict","text":"Load json file to fuel class schema: { name: Name/code of fuel, amount: Amount of fuel (unit), unit: Unit of amount fuel, properties: { desc: More information about fuel ncv: Net calorific value (Tj/Gg) ccf: Carbon content of fuel (kg/GJ) density: Density of fuel (kg/m3) } } Source code in src\\ghgpy\\datamodel\\fuel.py 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 @classmethod def from_dict ( cls , data ): ''' Load json file to fuel class schema: { name: Name/code of fuel, amount: Amount of fuel (unit), unit: Unit of amount fuel, properties: { desc: More information about fuel ncv: Net calorific value (Tj/Gg) ccf: Carbon content of fuel (kg/GJ) density: Density of fuel (kg/m3) } } ''' return cls ( data [ \"name\" ], data [ \"properties\" ][ 'desc' ], data [ \"properties\" ][ 'ncv' ], \\ data [ \"properties\" ][ 'ccf' ], data [ \"properties\" ][ 'density' ], data [ \"amount\" ], data [ \"unit\" ])","title":"from_dict"},{"location":"reference/#src.ghgpy.datamodel.fuel.BaseFuel.to_cc","text":"Carbon content of Fuel Source code in src\\ghgpy\\datamodel\\fuel.py 98 99 100 101 102 103 104 105 106 107 108 109 def to_cc ( self ): ''' Carbon content of Fuel ''' if self . data . properties . ccf == None : return None else : if type ( self . data . properties . ccf ) == tuple : ccf = ufloat ( self . data . properties . ccf ) else : ccf = self . data . properties . ccf return 1000 * self . to_tj () * ccf","title":"to_cc"},{"location":"reference/#src.ghgpy.datamodel.fuel.BaseFuel.to_kg","text":"Weight of Fuel Source code in src\\ghgpy\\datamodel\\fuel.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def to_kg ( self ): ''' Weight of Fuel ''' if type ( self . data . amount ) == tuple : amount = ufloat ( self . data . amount ) else : amount = self . data . amount if self . data . unit in weigh_units . units : return weigh_units . convert ( amount , self . data . unit , 'kg' ) if self . data . unit in volume_units . units : if self . data . properties . density == None : return None else : if type ( self . data . properties . density ) == tuple : density = ufloat ( self . data . properties . density ) else : density = self . data . properties . density return volume_units . convert ( amount , self . data . unit , 'm3' ) * density","title":"to_kg"},{"location":"reference/#src.ghgpy.datamodel.fuel.BaseFuel.to_litre","text":"Volume of Fuel Source code in src\\ghgpy\\datamodel\\fuel.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 def to_litre ( self ): ''' Volume of Fuel ''' if type ( self . data . amount ) == tuple : amount = ufloat ( self . data . amount ) else : amount = self . data . amount if self . data . unit in weigh_units . units : if self . data . properties . density == None : return None else : if type ( self . data . properties . density ) == tuple : density = ufloat ( self . data . properties . density ) else : density = self . data . properties . density return 1000 * weigh_units . convert ( amount , self . data . unit , 'kg' ) / density if self . data . unit in volume_units . units : return volume_units . convert ( amount , self . data . unit , 'litre' )","title":"to_litre"},{"location":"reference/#src.ghgpy.datamodel.fuel.BaseFuel.to_tj","text":"Energy of Fuel Source code in src\\ghgpy\\datamodel\\fuel.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 def to_tj ( self ): ''' Energy of Fuel ''' if any ( x == None for x in [ self . data . amount , self . data . properties . ncv ]): return None if type ( self . data . amount ) == tuple : amount = ufloat ( self . data . amount ) else : amount = self . data . amount if type ( self . data . properties . ncv ) == tuple : ncv = ufloat ( self . data . properties . ncv ) else : ncv = self . data . properties . ncv if self . data . unit in weigh_units . units : return weigh_units . convert ( amount , self . data . unit , 'Gg' ) * ncv if self . data . unit in volume_units . units : if self . data . properties . density == None : return None else : if type ( self . data . properties . density ) == tuple : density = ufloat ( self . data . properties . density ) else : density = self . data . properties . density return weigh_units . convert ( volume_units . convert ( amount , self . data . unit , 'm3' ) \\ * density , 'kg' , 'Gg' ) * ncv","title":"to_tj"},{"location":"reference/#src.ghgpy.datamodel.fuel.DefaultFuel","text":"Bases: BaseFuel amount: amount of fuel unit: unit of fuel Data Sources: Calorific value: 2006 IPCC Guidelines for National Greenhouse Gas Inventories V2_Ch1 - TABLE 1.2: https://www.ipcc-nggip.iges.or.jp/public/2006gl/pdf/2_Volume2/V2_1_Ch1_Introduction.pdf Density: IEA Database documentation: https://wds.iea.org/wds/pdf/oil_documentation.pdf Source code in src\\ghgpy\\datamodel\\fuel.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 class DefaultFuel ( BaseFuel ): ''' `amount: amount of fuel`\\n `unit: unit of fuel` ------------- Data Sources: \\n Calorific value: 2006 IPCC Guidelines for National Greenhouse Gas Inventories V2_Ch1 - TABLE 1.2: https://www.ipcc-nggip.iges.or.jp/public/2006gl/pdf/2_Volume2/V2_1_Ch1_Introduction.pdf \\n Density: IEA Database documentation: https://wds.iea.org/wds/pdf/oil_documentation.pdf \\n ''' def __init__ ( self , database , fuel , amount , unit ): if fuel not in database . keys (): raise ValueError ( \"Invalid Unit.\" ) super () . __init__ ( fuel , database [ fuel ][ 'desc' ], database [ fuel ][ 'ncv' ], \\ database [ fuel ][ 'ccf' ], database [ fuel ][ 'density' ], amount , unit ) # Load fuel from json file @classmethod def from_json ( cls , data ): ''' Load json file to fuel class Schema: { name: Name/code of fuel, amount: amount of fuel (unit), unit: unit of amount fuel } ''' return cls ( data [ \"name\" ], data [ \"amount\" ], data [ \"unit\" ]) def dict_to_fuel ( data , database ): ''' Schema: Class FuelData Load json file to fuel class schema: { name: Name/code of fuel, amount: Amount of fuel (unit), unit: Unit of amount fuel, properties: { desc: More information about fuel ncv: Net calorific value (Tj/Gg) ccf: Carbon content of fuel (kg/GJ) density: Density of fuel (kg/m3) } } ''' _required_data = [ 'name' , 'amount' , 'unit' ] _attributes_list = set ([ 'desc' , 'ncv' , 'ccf' , 'density' ]) if not all ( x in data . keys () for x in _required_data ): raise ValueError ( \"Invalid data, missing fields!\" ) elif not \"custom\" in data . keys (): if not data [ \"name\" ] in database . keys (): raise ValueError ( \"Invalid data, fuel name not found in default fuel list!\" ) else : fuel = data [ \"name\" ] return DefaultFuel ( data [ \"name\" ], data [ \"amount\" ], data [ \"unit\" ]) else : if all ( x in data [ \"custom\" ] . keys () for x in _attributes_list ): return BaseFuel ( data [ \"name\" ], data [ \"custom\" ][ 'desc' ], data [ \"custom\" ][ 'ncv' ], \\ data [ \"custom\" ][ 'ccf' ], data [ \"custom\" ][ 'density' ], data [ \"amount\" ], data [ \"unit\" ]) elif not data [ \"name\" ] in database . keys (): raise ValueError ( \"Invalid data, missing atribute which can not get from default fuel list!\" ) else : fuel = data [ \"name\" ] input = {} for i in _attributes_list . difference ( data [ \"custom\" ] . keys ()): input [ i ] = database [ fuel ][ i ] for i in data [ \"custom\" ] . keys (): input [ i ] = data [ \"custom\" ][ i ] return BaseFuel ( data [ \"name\" ], input [ 'desc' ], input [ 'ncv' ], \\ input [ 'ccf' ], input [ 'density' ], data [ \"amount\" ], data [ \"unit\" ])","title":"DefaultFuel"},{"location":"reference/#src.ghgpy.datamodel.fuel.DefaultFuel.dict_to_fuel","text":"Schema: Class FuelData Load json file to fuel class schema: { name: Name/code of fuel, amount: Amount of fuel (unit), unit: Unit of amount fuel, properties: { desc: More information about fuel ncv: Net calorific value (Tj/Gg) ccf: Carbon content of fuel (kg/GJ) density: Density of fuel (kg/m3) } } Source code in src\\ghgpy\\datamodel\\fuel.py 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 def dict_to_fuel ( data , database ): ''' Schema: Class FuelData Load json file to fuel class schema: { name: Name/code of fuel, amount: Amount of fuel (unit), unit: Unit of amount fuel, properties: { desc: More information about fuel ncv: Net calorific value (Tj/Gg) ccf: Carbon content of fuel (kg/GJ) density: Density of fuel (kg/m3) } } ''' _required_data = [ 'name' , 'amount' , 'unit' ] _attributes_list = set ([ 'desc' , 'ncv' , 'ccf' , 'density' ]) if not all ( x in data . keys () for x in _required_data ): raise ValueError ( \"Invalid data, missing fields!\" ) elif not \"custom\" in data . keys (): if not data [ \"name\" ] in database . keys (): raise ValueError ( \"Invalid data, fuel name not found in default fuel list!\" ) else : fuel = data [ \"name\" ] return DefaultFuel ( data [ \"name\" ], data [ \"amount\" ], data [ \"unit\" ]) else : if all ( x in data [ \"custom\" ] . keys () for x in _attributes_list ): return BaseFuel ( data [ \"name\" ], data [ \"custom\" ][ 'desc' ], data [ \"custom\" ][ 'ncv' ], \\ data [ \"custom\" ][ 'ccf' ], data [ \"custom\" ][ 'density' ], data [ \"amount\" ], data [ \"unit\" ]) elif not data [ \"name\" ] in database . keys (): raise ValueError ( \"Invalid data, missing atribute which can not get from default fuel list!\" ) else : fuel = data [ \"name\" ] input = {} for i in _attributes_list . difference ( data [ \"custom\" ] . keys ()): input [ i ] = database [ fuel ][ i ] for i in data [ \"custom\" ] . keys (): input [ i ] = data [ \"custom\" ][ i ] return BaseFuel ( data [ \"name\" ], input [ 'desc' ], input [ 'ncv' ], \\ input [ 'ccf' ], input [ 'density' ], data [ \"amount\" ], data [ \"unit\" ])","title":"dict_to_fuel"},{"location":"reference/#src.ghgpy.datamodel.fuel.DefaultFuel.from_json","text":"Load json file to fuel class Schema: { name: Name/code of fuel, amount: amount of fuel (unit), unit: unit of amount fuel } Source code in src\\ghgpy\\datamodel\\fuel.py 240 241 242 243 244 245 246 247 248 249 250 251 @classmethod def from_json ( cls , data ): ''' Load json file to fuel class Schema: { name: Name/code of fuel, amount: amount of fuel (unit), unit: unit of amount fuel } ''' return cls ( data [ \"name\" ], data [ \"amount\" ], data [ \"unit\" ])","title":"from_json"}]}