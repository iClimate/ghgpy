{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This site contains the project documentation for the Unit Converter Python component.</p> <p>Its aim is to provide you with a simple solution for converting various units.</p>"},{"location":"#table-of-contents","title":"Table Of Contents","text":"<p>Documentation consists of four separate parts: 1. About 2. Getting Started 3. Reference 4. Patch History 5. License</p> <p>Quickly find what you're looking for depending on your use case by looking at the different pages.</p>"},{"location":"#project-overview","title":"Project Overview","text":"<p>Do GHG Inventoy and more.</p> <p>Modules exported by this package:</p> <ul> <li><code>ghgpy</code>: Provide ghg accounting framework.</li> </ul>"},{"location":"about/","title":"About","text":"<p>Unit Converter is a simple Python package, allowing you to perform various unit conversions</p> <p>This component is lightweight, high performance and does not require any additional dependencies.</p> <p>For more information on how to start using the package, check:</p> <ul> <li>Getting Started</li> </ul>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#how-to-convert-units","title":"How To Convert Units?","text":"<p>The <code>converter</code> Python package helps you perform various unit conversions.</p> <p>Before using the package, you need to install it on your system. You can do it by using pip:</p> <pre><code>pip install python-unitconverterermac\n</code></pre> <p>Inside of your python script you can now import the converter from the <code>unitconverter</code> package:</p> <pre><code># your_script.py\nfrom unitconverter import converter\n</code></pre> <p>After you've imported the package, you can use it to perform various unit conversions:</p> <pre><code># your_script.py\nfrom unitconverter import converter\n\nprint(converter.convertLength(20, \"m\", \"cm\"))  # OUTPUT: 200.0\nprint(converter.convertWeight(5, \"kilogram\", \"g\")) # OUTPUT: 5000.0\n</code></pre> <p>You can also import conversion functions for specific units:     # your_script.py     from unitconverter.converter import convertLength</p> <p>You can then call the specific function to convert units:     # your_script.py     from unitconverter.converter import convertLength</p> <pre><code>print(convertLength(5, \"meter\", \"centimeter\")) # OUTPUT: 500.0\n</code></pre> <p>Modules available for conversion include: <code>convertLength</code>, <code>convertWeight</code>, <code>convertVolume</code>, <code>convertPressure</code>, <code>convertEnergy</code>, <code>convertData</code>, <code>convertSpeed</code>, <code>convertTime</code>, <code>convertTemperature</code></p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 B\u00f9i Kh\u1eafc T\u00fa (iClimate)</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"patch_history/","title":"Patch History","text":"<p>1.0.0</p> <ul> <li>Initial release</li> </ul>"},{"location":"reference/","title":"Reference","text":"<p>This page contains in-depth documentation of <code>unitconverter</code> package.  Use it as a reference for the technical implementation of the <code>converter</code> project code.</p> <p>iClimate - ghgpy</p> <p>Fuel objects Represent a amount of a specific fuel (C) Bui Khac Tu (bkt92) (C) iClimate</p>"},{"location":"reference/#src.ghgpy.datamodel.fuel.BaseFuel","title":"<code>BaseFuel</code>","text":"<p>Base Fuel Object (use for all kind of fuel) </p> <p>Representative by TJ </p> <p>Allow \"+, -\" operators with the same kind of fuel </p> <p>Allow convert to different property (Weight, Volume, Carbon Content)</p> Source code in <code>src\\ghgpy\\datamodel\\fuel.py</code> <pre><code>class BaseFuel:\n    \"\"\"\n    Base Fuel Object (use for all kind of fuel) \\n\n    Representative by TJ \\n\n    Allow \"+, -\" operators with the same kind of fuel \\n\n    Allow convert to different property (Weight, Volume, Carbon Content)\n    \"\"\"\n    # Init attributes of fuel\n    def __init__(self, name: str, desc: str, ncv: float, ccf: float, \\\n                 density: float, amount: float, unit: str):\n\n        properties = FuelProperties(desc=desc, ncv=ncv, ccf=ccf, density=density)\n        self.data = FuelData(name=name, amount=amount, unit=self._is_valid_unit(unit), properties=properties)\n\n    # Validate unit\n    def _is_valid_unit(self, unit):\n        if not ((unit in weigh_units.units) or (unit in volume_units.units)):\n            raise ValueError(\"Invalid Unit.\")\n        return unit\n\n    # Convert to TJ\n    def to_tj(self):\n        '''\n        Energy of Fuel\n        '''\n        if any(x == None for x in [self.data.amount, self.data.properties.ncv]):\n            return None\n        if type(self.data.amount) == tuple:\n            amount = ufloat(self.data.amount)\n        else:\n            amount = self.data.amount\n        if type(self.data.properties.ncv) == tuple:\n            ncv = ufloat(self.data.properties.ncv)\n        else:\n            ncv = self.data.properties.ncv\n        if self.data.unit in weigh_units.units:\n            return weigh_units.convert(amount, self.data.unit, 'Gg')*ncv\n        if self.data.unit in volume_units.units:\n            if self.data.properties.density == None:\n                return None\n            else:\n                if type(self.data.properties.density) == tuple:\n                    density = ufloat(self.data.properties.density)\n                else:\n                    density = self.data.properties.density\n                return weigh_units.convert(volume_units.convert(amount, self.data.unit, 'm3')\\\n                                           *density, 'kg', 'Gg')*ncv\n\n    # Convert to kg\n    def to_kg(self):\n        '''\n        Weight of Fuel\n        '''\n        if type(self.data.amount) == tuple:\n            amount = ufloat(self.data.amount)\n        else:\n            amount = self.data.amount       \n        if self.data.unit in weigh_units.units:\n            return weigh_units.convert(amount, self.data.unit, 'kg')\n        if self.data.unit in volume_units.units:\n            if self.data.properties.density == None:\n                return None\n            else:\n                if type(self.data.properties.density) == tuple:\n                    density = ufloat(self.data.properties.density)\n                else:\n                    density = self.data.properties.density\n                return volume_units.convert(amount, self.data.unit, 'm3')*density\n\n    # Convert carbon content (kg)\n    def to_cc(self):\n        '''\n        Carbon content of Fuel\n        '''\n        if self.data.properties.ccf == None:\n            return None\n        else:\n            if type(self.data.properties.ccf) == tuple:\n                ccf = ufloat(self.data.properties.ccf)\n            else:\n                ccf = self.data.properties.ccf\n            return 1000*self.to_tj()*ccf\n\n    # Convert to volume (litre)\n    def to_litre(self):\n        '''\n        Volume of Fuel\n        '''\n        if type(self.data.amount) == tuple:\n            amount = ufloat(self.data.amount)\n        else:\n            amount = self.data.amount\n        if self.data.unit in weigh_units.units:\n            if self.data.properties.density == None:\n                return None\n            else:\n                if type(self.data.properties.density) == tuple:\n                    density = ufloat(self.data.properties.density)\n                else:\n                    density = self.data.properties.density\n                return 1000*weigh_units.convert(amount, self.data.unit, 'kg')/density\n        if self.data.unit in volume_units.units:\n            return volume_units.convert(amount, self.data.unit, 'litre')\n\n    # Check two object have enough fuel data\n    def _check_fuel(self, other):\n        if not isinstance(other, BaseFuel):\n            return NotImplemented\n        if (self.data.name, self.data.properties.desc, self.data.properties.ncv, self.data.properties.density) == \\\n            (other.data.name, other.data.properties.desc, other.data.properties.ncv, other.data.properties.density):\n            return True\n        else:\n            return False\n\n    # Convert data to dict\n    def to_dict(self, properties = True):\n        if properties:\n            return self.data.dict()\n        else:\n            data = self.data.dict()\n            data.pop(\"properties\")\n            return data\n\n    # Return to tj (energy of fuel)\n    def __repr__(self) -&gt; str:\n        return (\n            'fuel('\n            f'name={self.data.name!r}, amount={self.to_tj()!r} Tj)'\n        )\n\n    def __hash__(self) -&gt; int:\n        return hash((self.data.name, self.data.properties.desc, self.to_tj(), self.data.properties.ncv))\n\n    def __eq__(self, other) -&gt; bool:\n        if not isinstance(other, BaseFuel):\n            return NotImplemented\n        return (\n            (self.data.name, self.to_tj(), self.data.properties.ncv) == \n            (other.data.name, other.to_tj(), other.data.properties.ncv))\n\n    def __add__(self, other) -&gt; float:\n        if not isinstance(other, BaseFuel):\n            return NotImplemented\n        if self._check_fuel(other):\n            if type(self.to_kg()) == ufloat:\n                amount = self.to_kg()+other.to_kg()\n                return BaseFuel(self.data.name, self.data.properties.desc, self.data.properties.ncv, self.data.properties.ccf, \\\n                                self.data.properties.density, (amount.value, amount.uncertainty) , \"kg\")\n            else:\n                return BaseFuel(self.data.name, self.data.properties.desc, self.data.properties.ncv, self.data.properties.ccf, \\\n                                self.data.properties.density, self.to_kg()+other.to_kg(), \"kg\")\n        else:\n            return NotImplemented\n\n    def __sub__(self, other) -&gt; float:\n        if not isinstance(other, BaseFuel):\n            return NotImplemented\n        if self._check_fuel(other):\n            if type(self.to_kg()) == ufloat:\n                amount = self.to_kg()-other.to_kg()\n                return BaseFuel(self.data.name, self.data.properties.desc, self.data.properties.ncv, self.data.properties.ccf, \\\n                                self.data.properties.density, (amount.value, amount.uncertainty) , \"kg\")\n            else:\n                return BaseFuel(self.data.name, self.data.properties.desc, self.data.properties.ncv, self.data.properties.ccf, \\\n                                self.data.properties.density, self.to_kg()-other.to_kg(), \"kg\")\n        else:\n            return NotImplemented\n\n    # Load fuel from json file\n    @classmethod\n    def from_dict(cls, data):\n        '''\n        Load json file to fuel class\n        schema:\n        { \n        name: Name/code of fuel,\n        amount: Amount of fuel (unit),\n        unit: Unit of amount fuel,\n        properties:\n            {\n            desc: More information about fuel\n            ncv: Net calorific value (Tj/Gg)\n            ccf: Carbon content of fuel (kg/GJ)\n            density: Density of fuel (kg/m3)\n            }\n        }\n        '''\n        return cls(data[\"name\"], data[\"properties\"]['desc'], data[\"properties\"]['ncv'], \\\n                            data[\"properties\"]['ccf'], data[\"properties\"]['density'], data[\"amount\"], data[\"unit\"])                \n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.fuel.BaseFuel.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Load json file to fuel class schema: {  name: Name/code of fuel, amount: Amount of fuel (unit), unit: Unit of amount fuel, properties:     {     desc: More information about fuel     ncv: Net calorific value (Tj/Gg)     ccf: Carbon content of fuel (kg/GJ)     density: Density of fuel (kg/m3)     } }</p> Source code in <code>src\\ghgpy\\datamodel\\fuel.py</code> <pre><code>@classmethod\ndef from_dict(cls, data):\n    '''\n    Load json file to fuel class\n    schema:\n    { \n    name: Name/code of fuel,\n    amount: Amount of fuel (unit),\n    unit: Unit of amount fuel,\n    properties:\n        {\n        desc: More information about fuel\n        ncv: Net calorific value (Tj/Gg)\n        ccf: Carbon content of fuel (kg/GJ)\n        density: Density of fuel (kg/m3)\n        }\n    }\n    '''\n    return cls(data[\"name\"], data[\"properties\"]['desc'], data[\"properties\"]['ncv'], \\\n                        data[\"properties\"]['ccf'], data[\"properties\"]['density'], data[\"amount\"], data[\"unit\"])                \n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.fuel.BaseFuel.to_cc","title":"<code>to_cc()</code>","text":"<p>Carbon content of Fuel</p> Source code in <code>src\\ghgpy\\datamodel\\fuel.py</code> <pre><code>def to_cc(self):\n    '''\n    Carbon content of Fuel\n    '''\n    if self.data.properties.ccf == None:\n        return None\n    else:\n        if type(self.data.properties.ccf) == tuple:\n            ccf = ufloat(self.data.properties.ccf)\n        else:\n            ccf = self.data.properties.ccf\n        return 1000*self.to_tj()*ccf\n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.fuel.BaseFuel.to_kg","title":"<code>to_kg()</code>","text":"<p>Weight of Fuel</p> Source code in <code>src\\ghgpy\\datamodel\\fuel.py</code> <pre><code>def to_kg(self):\n    '''\n    Weight of Fuel\n    '''\n    if type(self.data.amount) == tuple:\n        amount = ufloat(self.data.amount)\n    else:\n        amount = self.data.amount       \n    if self.data.unit in weigh_units.units:\n        return weigh_units.convert(amount, self.data.unit, 'kg')\n    if self.data.unit in volume_units.units:\n        if self.data.properties.density == None:\n            return None\n        else:\n            if type(self.data.properties.density) == tuple:\n                density = ufloat(self.data.properties.density)\n            else:\n                density = self.data.properties.density\n            return volume_units.convert(amount, self.data.unit, 'm3')*density\n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.fuel.BaseFuel.to_litre","title":"<code>to_litre()</code>","text":"<p>Volume of Fuel</p> Source code in <code>src\\ghgpy\\datamodel\\fuel.py</code> <pre><code>def to_litre(self):\n    '''\n    Volume of Fuel\n    '''\n    if type(self.data.amount) == tuple:\n        amount = ufloat(self.data.amount)\n    else:\n        amount = self.data.amount\n    if self.data.unit in weigh_units.units:\n        if self.data.properties.density == None:\n            return None\n        else:\n            if type(self.data.properties.density) == tuple:\n                density = ufloat(self.data.properties.density)\n            else:\n                density = self.data.properties.density\n            return 1000*weigh_units.convert(amount, self.data.unit, 'kg')/density\n    if self.data.unit in volume_units.units:\n        return volume_units.convert(amount, self.data.unit, 'litre')\n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.fuel.BaseFuel.to_tj","title":"<code>to_tj()</code>","text":"<p>Energy of Fuel</p> Source code in <code>src\\ghgpy\\datamodel\\fuel.py</code> <pre><code>def to_tj(self):\n    '''\n    Energy of Fuel\n    '''\n    if any(x == None for x in [self.data.amount, self.data.properties.ncv]):\n        return None\n    if type(self.data.amount) == tuple:\n        amount = ufloat(self.data.amount)\n    else:\n        amount = self.data.amount\n    if type(self.data.properties.ncv) == tuple:\n        ncv = ufloat(self.data.properties.ncv)\n    else:\n        ncv = self.data.properties.ncv\n    if self.data.unit in weigh_units.units:\n        return weigh_units.convert(amount, self.data.unit, 'Gg')*ncv\n    if self.data.unit in volume_units.units:\n        if self.data.properties.density == None:\n            return None\n        else:\n            if type(self.data.properties.density) == tuple:\n                density = ufloat(self.data.properties.density)\n            else:\n                density = self.data.properties.density\n            return weigh_units.convert(volume_units.convert(amount, self.data.unit, 'm3')\\\n                                       *density, 'kg', 'Gg')*ncv\n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.fuel.DefaultFuel","title":"<code>DefaultFuel</code>","text":"<p>             Bases: <code>BaseFuel</code></p> <p><code>amount: amount of fuel</code></p> <p><code>unit: unit of fuel</code></p> <p>Data Sources: </p> <p>Calorific value: 2006 IPCC Guidelines for National Greenhouse Gas Inventories V2_Ch1 - TABLE 1.2: https://www.ipcc-nggip.iges.or.jp/public/2006gl/pdf/2_Volume2/V2_1_Ch1_Introduction.pdf </p> <p>Density: IEA Database documentation: https://wds.iea.org/wds/pdf/oil_documentation.pdf</p> Source code in <code>src\\ghgpy\\datamodel\\fuel.py</code> <pre><code>class DefaultFuel(BaseFuel):\n    '''\n    `amount: amount of fuel`\\n\n    `unit: unit of fuel`\n\n    -------------\n    Data Sources: \\n\n    Calorific value: 2006 IPCC Guidelines for National Greenhouse Gas Inventories V2_Ch1 - TABLE 1.2:\n    https://www.ipcc-nggip.iges.or.jp/public/2006gl/pdf/2_Volume2/V2_1_Ch1_Introduction.pdf \\n\n    Density: IEA Database documentation:\n    https://wds.iea.org/wds/pdf/oil_documentation.pdf \\n\n\n    '''\n    def __init__(self, database, fuel, amount, unit):\n        if fuel not in database.keys():\n            raise ValueError(\"Invalid Unit.\")\n\n        super().__init__(fuel, database[fuel]['desc'], database[fuel]['ncv'], \\\n                         database[fuel]['ccf'], database[fuel]['density'], amount, unit)\n\n    # Load fuel from json file\n    @classmethod\n    def from_json(cls, data):\n        '''\n        Load json file to fuel class\n        Schema:\n        { \n        name: Name/code of fuel,\n        amount: amount of fuel (unit),\n        unit: unit of amount fuel\n        }\n        '''\n        return cls(data[\"name\"], data[\"amount\"],  data[\"unit\"])\n\n    def dict_to_fuel(data, database):\n        '''\n        Schema: Class FuelData\n\n        Load json file to fuel class\n        schema:\n        { \n        name: Name/code of fuel,\n        amount: Amount of fuel (unit),\n        unit: Unit of amount fuel,\n        properties:\n            {\n            desc: More information about fuel\n            ncv: Net calorific value (Tj/Gg)\n            ccf: Carbon content of fuel (kg/GJ)\n            density: Density of fuel (kg/m3)\n            }\n        }\n        '''\n        _required_data = ['name', 'amount', 'unit']\n        _attributes_list = set(['desc', 'ncv', 'ccf', 'density'])\n\n        if not all(x in data.keys() for x in _required_data):\n            raise ValueError(\"Invalid data, missing fields!\")\n\n        elif not \"custom\" in data.keys():\n            if not data[\"name\"] in database.keys():\n                raise ValueError(\"Invalid data, fuel name not found in default fuel list!\")\n            else:\n                fuel = data[\"name\"]\n                return DefaultFuel(data[\"name\"], data[\"amount\"],  data[\"unit\"])\n        else:\n            if all(x in data[\"custom\"].keys() for x in _attributes_list):\n                return BaseFuel(data[\"name\"], data[\"custom\"]['desc'], data[\"custom\"]['ncv'], \\\n                            data[\"custom\"]['ccf'], data[\"custom\"]['density'], data[\"amount\"], data[\"unit\"])                \n            elif not data[\"name\"] in database.keys():\n                raise ValueError(\"Invalid data, missing atribute which can not get from default fuel list!\")\n            else:\n                fuel = data[\"name\"]\n                input = {}\n                for i in _attributes_list.difference(data[\"custom\"].keys()):\n                    input[i] = database[fuel][i]\n                for i in data[\"custom\"].keys():\n                    input[i] = data[\"custom\"][i]\n                return BaseFuel(data[\"name\"], input['desc'], input['ncv'], \\\n                            input['ccf'], input['density'], data[\"amount\"],  data[\"unit\"])\n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.fuel.DefaultFuel.dict_to_fuel","title":"<code>dict_to_fuel(data, database)</code>","text":"<p>Schema: Class FuelData</p> <p>Load json file to fuel class schema: {  name: Name/code of fuel, amount: Amount of fuel (unit), unit: Unit of amount fuel, properties:     {     desc: More information about fuel     ncv: Net calorific value (Tj/Gg)     ccf: Carbon content of fuel (kg/GJ)     density: Density of fuel (kg/m3)     } }</p> Source code in <code>src\\ghgpy\\datamodel\\fuel.py</code> <pre><code>def dict_to_fuel(data, database):\n    '''\n    Schema: Class FuelData\n\n    Load json file to fuel class\n    schema:\n    { \n    name: Name/code of fuel,\n    amount: Amount of fuel (unit),\n    unit: Unit of amount fuel,\n    properties:\n        {\n        desc: More information about fuel\n        ncv: Net calorific value (Tj/Gg)\n        ccf: Carbon content of fuel (kg/GJ)\n        density: Density of fuel (kg/m3)\n        }\n    }\n    '''\n    _required_data = ['name', 'amount', 'unit']\n    _attributes_list = set(['desc', 'ncv', 'ccf', 'density'])\n\n    if not all(x in data.keys() for x in _required_data):\n        raise ValueError(\"Invalid data, missing fields!\")\n\n    elif not \"custom\" in data.keys():\n        if not data[\"name\"] in database.keys():\n            raise ValueError(\"Invalid data, fuel name not found in default fuel list!\")\n        else:\n            fuel = data[\"name\"]\n            return DefaultFuel(data[\"name\"], data[\"amount\"],  data[\"unit\"])\n    else:\n        if all(x in data[\"custom\"].keys() for x in _attributes_list):\n            return BaseFuel(data[\"name\"], data[\"custom\"]['desc'], data[\"custom\"]['ncv'], \\\n                        data[\"custom\"]['ccf'], data[\"custom\"]['density'], data[\"amount\"], data[\"unit\"])                \n        elif not data[\"name\"] in database.keys():\n            raise ValueError(\"Invalid data, missing atribute which can not get from default fuel list!\")\n        else:\n            fuel = data[\"name\"]\n            input = {}\n            for i in _attributes_list.difference(data[\"custom\"].keys()):\n                input[i] = database[fuel][i]\n            for i in data[\"custom\"].keys():\n                input[i] = data[\"custom\"][i]\n            return BaseFuel(data[\"name\"], input['desc'], input['ncv'], \\\n                        input['ccf'], input['density'], data[\"amount\"],  data[\"unit\"])\n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.fuel.DefaultFuel.from_json","title":"<code>from_json(data)</code>  <code>classmethod</code>","text":"<p>Load json file to fuel class Schema: {  name: Name/code of fuel, amount: amount of fuel (unit), unit: unit of amount fuel }</p> Source code in <code>src\\ghgpy\\datamodel\\fuel.py</code> <pre><code>@classmethod\ndef from_json(cls, data):\n    '''\n    Load json file to fuel class\n    Schema:\n    { \n    name: Name/code of fuel,\n    amount: amount of fuel (unit),\n    unit: unit of amount fuel\n    }\n    '''\n    return cls(data[\"name\"], data[\"amount\"],  data[\"unit\"])\n</code></pre>"}]}