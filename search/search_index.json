{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This site contains the project documentation for the Unit Converter Python component.</p> <p>Its aim is to provide you with a simple solution for converting various units.</p>"},{"location":"#table-of-contents","title":"Table Of Contents","text":"<p>Documentation consists of four separate parts: 1. About 2. Getting Started 3. Reference 4. Patch History 5. License</p> <p>Quickly find what you're looking for depending on your use case by looking at the different pages.</p>"},{"location":"#project-overview","title":"Project Overview","text":"<p>Do GHG Inventoy and more.</p> <p>Modules exported by this package:</p> <ul> <li><code>ghgpy</code>: Provide ghg accounting framework.</li> </ul>"},{"location":"about/","title":"About","text":"<p>GHGpy is a python pakage, backbone for our GHG Inventory platform.</p> <p>This is an intuitive, lightweight, high performance GHG accouting tool.</p> <p>With special number type: <code>ufnum</code> easy to evaluate the data uncertainly.</p> <p>Compliant with IPCC 2006 and GHG Protocol, with the latest database update (limited free database).</p> <p>For more information on how to start using the package, check:</p> <ul> <li>Getting Started</li> </ul>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#how-calculate-your-factory-emission","title":"How Calculate your factory emission?","text":"<p>The <code>ghgpy</code> Python package helps you doing ghg invertory in the easy way and more ... Before using the package, you need to install it on your system. You can do it by using pip:</p> <pre><code>pip install ghgpy\n</code></pre> <p>Inside of your python script you can now import the converter from the <code>ghgpy</code> package:</p> <pre><code># your_script.py\nfrom ghgpy import factory\n</code></pre> <p>After you've imported the package, you can use it:</p> <pre><code># your_script.py\nfrom ghgpy import factory\nfrom ghgpy.activities.energy import combustion\n</code></pre> <p>First you need to crete a factory with basic information:     # your_script.py     your_factory = factory(\"your inpu here\")</p> <p>Then you can add a process to your factory with fuel data:     # your_script.py     your_factory.add_process(combustion(fuel, \"type of combustion\"))</p> <p>Get the total emission of your factory     your_factory.emission()</p> <p>Activity modules: <code>combustion</code>, <code>refrigerant_use</code>, <code>refrigerant_use</code> Fuel modules: <code>BaseFuel</code>, <code>DefaultFuel</code> Material and GHG gas modules: <code>GHGGas</code></p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 B\u00f9i Kh\u1eafc T\u00fa (iClimate)</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"patch_history/","title":"Patch History","text":"<p>1.0.0</p> <ul> <li>Initial release</li> </ul>"},{"location":"reference/","title":"Reference","text":"<p>This page contains in-depth documentation of <code>ghgpy</code> package.  Use it as a reference for the technical implementation of the <code>ghgpy</code> by iClimate project code.</p> <p>iClimate - ghgpy</p> <p>Fuel objects Represent a amount of a specific fuel (C) Bui Khac Tu (bkt92) (C) iClimate</p> <p>iClimate - ghgpy</p> <p>GHG Gas objects Represent a amount of a specific ghg gas (C) Bui Khac Tu (bkt92) (C) iClimate</p> <p>Unit Converters for GHG inventory (c) Bui Khac Tu (bkt92)</p>"},{"location":"reference/#src.ghgpy.datamodel.fuel.BaseFuel","title":"<code>BaseFuel</code>","text":"<p>Base Fuel Object (use for all kind of fuel) </p> <p>Representative by TJ </p> <p>Allow \"+, -\" operators with the same kind of fuel </p> <p>Allow convert to different property (Weight, Volume, Carbon Content)</p> Source code in <code>src\\ghgpy\\datamodel\\fuel.py</code> <pre><code>class BaseFuel:\n    \"\"\"\n    Base Fuel Object (use for all kind of fuel) \\n\n    Representative by TJ \\n\n    Allow \"+, -\" operators with the same kind of fuel \\n\n    Allow convert to different property (Weight, Volume, Carbon Content)\n    \"\"\"\n    # Init attributes of fuel\n    def __init__(self, name: str, desc: str, ncv: ufnum, ccf: ufnum, \\\n                 density: ufnum, amount: ufnum, unit: str):\n\n        properties = FuelProperties(desc=desc, ncv=ncv.to_unum(), ccf=ccf.to_unum(), density= density.to_unum())\n        self.data = FuelData(name=name, amount= amount.to_unum(), unit=self._is_valid_unit(unit), properties=properties)\n\n    # Validate unit\n    def _is_valid_unit(self, unit):\n        if not ((unit in weigh_units.units) or (unit in volume_units.units)):\n            raise ValueError(\"Invalid Unit.\")\n        return unit\n\n    # Convert to TJ\n    def cal_energy(self, unit='tj'):\n        '''\n        Energy of Fuel in unit \\n\n        Default unit `Tj`\n        '''\n        if any(x == None for x in [self.data.amount, self.data.properties.ncv]):\n            return None\n        amount = self.data.amount.to_ufnum()\n        ncv = self.data.properties.ncv.to_ufnum()\n        if self.data.unit in weigh_units.units:\n            energy = weigh_units.convert(amount, self.data.unit, 'Gg')*ncv\n            return energy_units.convert(energy, 'tj', unit)\n        if self.data.unit in volume_units.units:\n            if self.data.properties.density == None:\n                return None\n            else:\n                density = self.data.properties.density.to_ufnum()\n                energy = weigh_units.convert(volume_units.convert(amount, self.data.unit, 'm3')\\\n                                           *density, 'kg', 'Gg')*ncv\n                return energy_units.convert(energy, 'tj', unit)\n\n    # Convert to kg\n    def cal_weight(self, unit='kg'):\n        '''\n        Weight of Fuel in unit \\n\n        Unit default `kg`\n        '''\n        amount = self.data.amount.to_ufnum()\n        if self.data.unit in weigh_units.units:\n            return weigh_units.convert(amount, self.data.unit, unit)\n        if self.data.unit in volume_units.units:\n            if self.data.properties.density == None:\n                return None\n            else:\n                density = self.data.properties.density.to_ufnum()\n                weight = volume_units.convert(amount, self.data.unit, 'm3')*density\n                return weigh_units.convert(weight, 'kg', unit)\n\n    # Convert carbon content (kg)\n    def calc_cc(self, unit='kg'):\n        '''\n        Carbon content of Fuel in unit \\n\n        Default unit `kg`\n        '''\n        if self.data.properties.ccf == None:\n            return None\n        else:\n            ccf = self.data.properties.ccf.to_ufnum()\n            return weigh_units.convert(1000*self.cal_energy()*ccf, 'kg', unit)\n\n    # Convert to volume (litre)\n    def cal_volume(self, unit='l'):\n        '''\n        Volume of Fuel in unit \\n\n        Default unit `litre`\n        '''\n        amount = self.data.amount.to_ufnum()\n        if self.data.unit in weigh_units.units:\n            if self.data.properties.density == None:\n                return None\n            else:\n                density = self.data.properties.density.to_ufnum()\n                volume = weigh_units.convert(amount, self.data.unit, 'kg')/density\n                return volume_units.convert(volume, 'm3', unit)\n        if self.data.unit in volume_units.units:\n            return volume_units.convert(amount, self.data.unit, unit)\n\n    # Check two object have enough fuel data\n    def _check_fuel(self, other):\n        if not isinstance(other, BaseFuel):\n            return NotImplemented\n        if (self.data.name, self.data.properties.desc, self.data.properties.ncv, self.data.properties.density) == \\\n            (other.data.name, other.data.properties.desc, other.data.properties.ncv, other.data.properties.density):\n            return True\n        else:\n            return False\n\n    # Convert data to dict\n    def to_dict(self, properties = True):\n        if properties:\n            return self.data.dict()\n        else:\n            data = self.data.dict()\n            data.pop(\"properties\")\n            return data\n\n    # Return to tj (energy of fuel)\n    def __repr__(self) -&gt; str:\n        return (\n            'fuel('\n            f'name={self.data.name!r}, amount={self.cal_energy()!r} Tj)'\n        )\n\n    def __hash__(self) -&gt; int:\n        return hash((self.data.name, self.data.properties.desc, self.cal_energy(), self.data.properties.ncv))\n\n    def __eq__(self, other) -&gt; bool:\n        if not isinstance(other, BaseFuel):\n            return NotImplemented\n        return (\n            (self.data.name, self.cal_energy(), self.data.properties.ncv) == \n            (other.data.name, other.cal_energy(), other.data.properties.ncv))\n\n    def __add__(self, other) -&gt; float:\n        if not isinstance(other, BaseFuel):\n            return NotImplemented\n        if self._check_fuel(other):\n            sum = self.cal_weight()+other.cal_weight()\n            amount = UNumber(value=sum.value, uncertainty=sum.uncertainty)\n            return BaseFuel(self.data.name, self.data.properties.desc, self.data.properties.ncv, self.data.properties.ccf, \\\n                            self.data.properties.density, amount, \"kg\")    \n        else:\n            return NotImplemented\n\n    def __sub__(self, other) -&gt; float:\n        if not isinstance(other, BaseFuel):\n            return NotImplemented\n        if self._check_fuel(other):\n            sub = self.cal_weight()-other.cal_weight()\n            amount = UNumber(value=sub.value, uncertainty=sub.uncertainty)\n            return BaseFuel(self.data.name, self.data.properties.desc, self.data.properties.ncv, self.data.properties.ccf, \\\n                            self.data.properties.density, amount, \"kg\")\n        else:\n            return NotImplemented\n\n    # Load fuel from json file\n    @classmethod\n    def from_dict(cls, data):\n        '''\n        Load json file to fuel class\n        schema:\n        { \n        name: Name/code of fuel,\n        amount: Amount of fuel (unit),\n        unit: Unit of amount fuel,\n        properties:\n            {\n            desc: More information about fuel\n            ncv: Net calorific value (Tj/Gg)\n            ccf: Carbon content of fuel (kg/GJ)\n            density: Density of fuel (kg/m3)\n            }\n        }\n        '''\n        return cls(data[\"name\"], data[\"properties\"]['desc'], ufnum.from_dict(data[\"properties\"]['ncv']), \\\n                            ufnum.from_dict(data[\"properties\"]['ccf']), ufnum.from_dict(data[\"properties\"]['density']), \\\n                                ufnum.from_dict(data[\"amount\"]), data[\"unit\"])                \n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.fuel.BaseFuel.cal_energy","title":"<code>cal_energy(unit='tj')</code>","text":"<p>Energy of Fuel in unit </p> <p>Default unit <code>Tj</code></p> Source code in <code>src\\ghgpy\\datamodel\\fuel.py</code> <pre><code>def cal_energy(self, unit='tj'):\n    '''\n    Energy of Fuel in unit \\n\n    Default unit `Tj`\n    '''\n    if any(x == None for x in [self.data.amount, self.data.properties.ncv]):\n        return None\n    amount = self.data.amount.to_ufnum()\n    ncv = self.data.properties.ncv.to_ufnum()\n    if self.data.unit in weigh_units.units:\n        energy = weigh_units.convert(amount, self.data.unit, 'Gg')*ncv\n        return energy_units.convert(energy, 'tj', unit)\n    if self.data.unit in volume_units.units:\n        if self.data.properties.density == None:\n            return None\n        else:\n            density = self.data.properties.density.to_ufnum()\n            energy = weigh_units.convert(volume_units.convert(amount, self.data.unit, 'm3')\\\n                                       *density, 'kg', 'Gg')*ncv\n            return energy_units.convert(energy, 'tj', unit)\n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.fuel.BaseFuel.cal_volume","title":"<code>cal_volume(unit='l')</code>","text":"<p>Volume of Fuel in unit </p> <p>Default unit <code>litre</code></p> Source code in <code>src\\ghgpy\\datamodel\\fuel.py</code> <pre><code>def cal_volume(self, unit='l'):\n    '''\n    Volume of Fuel in unit \\n\n    Default unit `litre`\n    '''\n    amount = self.data.amount.to_ufnum()\n    if self.data.unit in weigh_units.units:\n        if self.data.properties.density == None:\n            return None\n        else:\n            density = self.data.properties.density.to_ufnum()\n            volume = weigh_units.convert(amount, self.data.unit, 'kg')/density\n            return volume_units.convert(volume, 'm3', unit)\n    if self.data.unit in volume_units.units:\n        return volume_units.convert(amount, self.data.unit, unit)\n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.fuel.BaseFuel.cal_weight","title":"<code>cal_weight(unit='kg')</code>","text":"<p>Weight of Fuel in unit </p> <p>Unit default <code>kg</code></p> Source code in <code>src\\ghgpy\\datamodel\\fuel.py</code> <pre><code>def cal_weight(self, unit='kg'):\n    '''\n    Weight of Fuel in unit \\n\n    Unit default `kg`\n    '''\n    amount = self.data.amount.to_ufnum()\n    if self.data.unit in weigh_units.units:\n        return weigh_units.convert(amount, self.data.unit, unit)\n    if self.data.unit in volume_units.units:\n        if self.data.properties.density == None:\n            return None\n        else:\n            density = self.data.properties.density.to_ufnum()\n            weight = volume_units.convert(amount, self.data.unit, 'm3')*density\n            return weigh_units.convert(weight, 'kg', unit)\n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.fuel.BaseFuel.calc_cc","title":"<code>calc_cc(unit='kg')</code>","text":"<p>Carbon content of Fuel in unit </p> <p>Default unit <code>kg</code></p> Source code in <code>src\\ghgpy\\datamodel\\fuel.py</code> <pre><code>def calc_cc(self, unit='kg'):\n    '''\n    Carbon content of Fuel in unit \\n\n    Default unit `kg`\n    '''\n    if self.data.properties.ccf == None:\n        return None\n    else:\n        ccf = self.data.properties.ccf.to_ufnum()\n        return weigh_units.convert(1000*self.cal_energy()*ccf, 'kg', unit)\n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.fuel.BaseFuel.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Load json file to fuel class schema: {  name: Name/code of fuel, amount: Amount of fuel (unit), unit: Unit of amount fuel, properties:     {     desc: More information about fuel     ncv: Net calorific value (Tj/Gg)     ccf: Carbon content of fuel (kg/GJ)     density: Density of fuel (kg/m3)     } }</p> Source code in <code>src\\ghgpy\\datamodel\\fuel.py</code> <pre><code>@classmethod\ndef from_dict(cls, data):\n    '''\n    Load json file to fuel class\n    schema:\n    { \n    name: Name/code of fuel,\n    amount: Amount of fuel (unit),\n    unit: Unit of amount fuel,\n    properties:\n        {\n        desc: More information about fuel\n        ncv: Net calorific value (Tj/Gg)\n        ccf: Carbon content of fuel (kg/GJ)\n        density: Density of fuel (kg/m3)\n        }\n    }\n    '''\n    return cls(data[\"name\"], data[\"properties\"]['desc'], ufnum.from_dict(data[\"properties\"]['ncv']), \\\n                        ufnum.from_dict(data[\"properties\"]['ccf']), ufnum.from_dict(data[\"properties\"]['density']), \\\n                            ufnum.from_dict(data[\"amount\"]), data[\"unit\"])                \n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.fuel.DefaultFuel","title":"<code>DefaultFuel</code>","text":"<p>             Bases: <code>BaseFuel</code></p> <p><code>amount: amount of fuel</code></p> <p><code>unit: unit of fuel</code></p> <p>Data Sources: </p> <p>Calorific value: 2006 IPCC Guidelines for National Greenhouse Gas Inventories V2_Ch1 - TABLE 1.2: https://www.ipcc-nggip.iges.or.jp/public/2006gl/pdf/2_Volume2/V2_1_Ch1_Introduction.pdf </p> <p>Density: IEA Database documentation: https://wds.iea.org/wds/pdf/oil_documentation.pdf</p> Source code in <code>src\\ghgpy\\datamodel\\fuel.py</code> <pre><code>class DefaultFuel(BaseFuel):\n    '''\n    `amount: amount of fuel`\\n\n    `unit: unit of fuel`\n\n    -------------\n    Data Sources: \\n\n    Calorific value: 2006 IPCC Guidelines for National Greenhouse Gas Inventories V2_Ch1 - TABLE 1.2:\n    https://www.ipcc-nggip.iges.or.jp/public/2006gl/pdf/2_Volume2/V2_1_Ch1_Introduction.pdf \\n\n    Density: IEA Database documentation:\n    https://wds.iea.org/wds/pdf/oil_documentation.pdf \\n\n\n    '''\n    def __init__(self, database: dict, fuel: str, amount: ufnum, unit: str):\n        if fuel not in database.keys():\n            raise ValueError(\"Fuel not found in database.\")\n\n        super().__init__(fuel, database[fuel]['desc'], ufnum.from_dict(database[fuel]['ncv']), \\\n                         ufnum.from_dict(database[fuel]['ccf']), ufnum.from_dict(database[fuel]['density']) , amount, unit)\n\n    # Load fuel from json file\n    @classmethod\n    def from_json(cls, database, data):\n        '''\n        Load json file to fuel class\n        Schema:\n        { \n        name: Name/code of fuel,\n        amount: amount of fuel (unit),\n        unit: unit of amount fuel\n        }\n        '''\n        if data[\"name\"] not in database.keys():\n            raise ValueError(\"Fuel not found in database.\")\n        return cls(database, data[\"name\"], data[\"amount\"],  data[\"unit\"])\n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.fuel.DefaultFuel.from_json","title":"<code>from_json(database, data)</code>  <code>classmethod</code>","text":"<p>Load json file to fuel class Schema: {  name: Name/code of fuel, amount: amount of fuel (unit), unit: unit of amount fuel }</p> Source code in <code>src\\ghgpy\\datamodel\\fuel.py</code> <pre><code>@classmethod\ndef from_json(cls, database, data):\n    '''\n    Load json file to fuel class\n    Schema:\n    { \n    name: Name/code of fuel,\n    amount: amount of fuel (unit),\n    unit: unit of amount fuel\n    }\n    '''\n    if data[\"name\"] not in database.keys():\n        raise ValueError(\"Fuel not found in database.\")\n    return cls(database, data[\"name\"], data[\"amount\"],  data[\"unit\"])\n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.fuel.dict_to_fuel","title":"<code>dict_to_fuel(data, database)</code>","text":"<p>Schema: Class FuelData</p> <p>Load json file to fuel class schema: {  name: Name/code of fuel, amount: Amount of fuel (unit), unit: Unit of amount fuel, properties:     {     desc: More information about fuel     ncv: Net calorific value (Tj/Gg)     ccf: Carbon content of fuel (kg/GJ)     density: Density of fuel (kg/m3)     } }</p> Source code in <code>src\\ghgpy\\datamodel\\fuel.py</code> <pre><code>def dict_to_fuel(data, database):\n    '''\n    Schema: Class FuelData\n\n    Load json file to fuel class\n    schema:\n    { \n    name: Name/code of fuel,\n    amount: Amount of fuel (unit),\n    unit: Unit of amount fuel,\n    properties:\n        {\n        desc: More information about fuel\n        ncv: Net calorific value (Tj/Gg)\n        ccf: Carbon content of fuel (kg/GJ)\n        density: Density of fuel (kg/m3)\n        }\n    }\n    '''\n    _required_data = ['name', 'amount', 'unit']\n    _attributes_list = set(['desc', 'ncv', 'ccf', 'density'])\n\n    if not all(x in data.keys() for x in _required_data):\n        raise ValueError(\"Invalid data, missing fields!\")\n\n    elif not \"properties\" in data.keys():\n        if not data[\"name\"] in database.keys():\n            raise ValueError(\"Invalid data, fuel name not found in default fuel list!\")\n        else:\n            fuel = data[\"name\"]\n            return DefaultFuel(database, data[\"name\"], ufnum.from_dict(data[\"amount\"]),  data[\"unit\"])\n    else:\n        if all(x in data[\"properties\"].keys() for x in _attributes_list):\n            return BaseFuel(data[\"name\"], data[\"properties\"]['desc'], ufnum.from_dict(data[\"properties\"]['ncv']), \\\n                        ufnum.from_dict(data[\"properties\"]['ccf']), ufnum.from_dict(data[\"properties\"]['density']), \\\n                            ufnum.from_dict(data[\"amount\"]), data[\"unit\"])                \n        elif not data[\"name\"] in database.keys():\n            raise ValueError(\"Invalid data, missing atribute which can not get from default fuel list!\")\n        else:\n            fuel = data[\"name\"]\n            input = {}\n            for i in _attributes_list.difference(data[\"properties\"].keys()):\n                input[i] = database[fuel][i]\n            for i in data[\"properties\"].keys():\n                input[i] = data[\"properties\"][i]\n            return BaseFuel(data[\"name\"], input['desc'], ufnum.from_dict(input['ncv']), \\\n                        ufnum.from_dict(input['ccf']), ufnum.from_dict(input['density']), \\\n                            ufnum.from_dict(data[\"amount\"]),  data[\"unit\"])\n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.ghggas.GHGGas","title":"<code>GHGGas</code>","text":"<p>GHG Gas Object (use for all kind of GHG gas) </p> <p>Representative by tCO2e </p> <p>Allow \"+, -\" operators with the same kind of gas</p> Source code in <code>src\\ghgpy\\datamodel\\ghggas.py</code> <pre><code>class GHGGas:\n    \"\"\"\n    GHG Gas Object (use for all kind of GHG gas) \\n\n    Representative by tCO2e \\n\n    Allow \"+, -\" operators with the same kind of gas\n    \"\"\"\n    # Init attributes of fuel\n    def __init__(self, name: str, amount: float, unit: str, desc: str, gwp: float, density: float):\n        self.data = GHGDATA(name=name, amount=amount, unit=unit, desc=desc, gwp=gwp, density=density)\n\n    # Convert to tonnes\n    def to_tonnes(self):\n        '''\n        Convert to metric tonnes\n        '''\n        if self.data.unit in weigh_units.units:\n            return weigh_units.convert(self.data.amount, self.data.unit, 'tonne')\n        if self.data.unit in volume_units.units:\n            if self.data.density == None:\n                return None\n            else:\n                return volume_units.convert(self.data.amount, self.data.unit, 'm3')*self.data.density/1000\n\n    def emission(self):\n        return self.to_tonnes()*self.data.gwp\n\n    def __repr__(self) -&gt; str:\n        return (\n            'fuel('\n            f'name={self.data.name!r}, amount={self.emission()!r} tCO2e)'\n        )\n\n    def __hash__(self) -&gt; int:\n        return hash((self.data.amount, self.data.name, self.data.gwp))\n\n    def __eq__(self, other) -&gt; bool:\n        if not isinstance(other, GHGGas):\n            return NotImplemented\n        return (\n            (self.data.amount, self.data.name, self.data.gwp) == \n            (other.data.amount, other.data.name, other.data.gwp))\n\n    def __add__(self, other) -&gt; float:\n        if not isinstance(other, GHGGas):\n            return NotImplemented\n        if (self.data.name, self.data.gwp) == (other.data.name, other.data.gwp):\n            return GHGGas(self.data.name, self.to_tonnes() + other.to_tonnes(), \"tonne\", \\\n                          self.data.desc, self.data.gwp, self.data.density)\n        else:\n            return NotImplemented\n\n    def __sub__(self, other) -&gt; float:\n        if not isinstance(other, GHGGas):\n            return NotImplemented\n        if (self.data.name, self.data.gwp) == (other.data.name, other.data.gwp):\n            return GHGGas(self.data.name, self.to_tonnes() - other.to_tonnes(), \"tonne\", \\\n                          self.data.desc, self.data.gwp, self.data.density)\n        else:\n            return NotImplemented\n\n    def to_dict(self):\n        return self.data.dict()\n\n    @classmethod\n    def from_dict(cls, data):\n        '''\n        {'name': {'title': 'Name', 'type': 'string'},\n        'amount': {'title': 'Amount', 'type': 'number'},\n        'unit': {'title': 'Unit', 'type': 'string'},\n        'desc': {'title': 'Desc', 'type': 'string'},\n        'gwp': {'title': 'Gwp', 'type': 'number'},\n        'density': {'title': 'Density', 'type': 'number'}}\n        '''\n        return cls(data[\"name\"], data[\"amount\"], data[\"unit\"], data[\"desc\"], data[\"gwp\"], data[\"density\"])\n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.ghggas.GHGGas.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>{'name': {'title': 'Name', 'type': 'string'}, 'amount': {'title': 'Amount', 'type': 'number'}, 'unit': {'title': 'Unit', 'type': 'string'}, 'desc': {'title': 'Desc', 'type': 'string'}, 'gwp': {'title': 'Gwp', 'type': 'number'}, 'density': {'title': 'Density', 'type': 'number'}}</p> Source code in <code>src\\ghgpy\\datamodel\\ghggas.py</code> <pre><code>@classmethod\ndef from_dict(cls, data):\n    '''\n    {'name': {'title': 'Name', 'type': 'string'},\n    'amount': {'title': 'Amount', 'type': 'number'},\n    'unit': {'title': 'Unit', 'type': 'string'},\n    'desc': {'title': 'Desc', 'type': 'string'},\n    'gwp': {'title': 'Gwp', 'type': 'number'},\n    'density': {'title': 'Density', 'type': 'number'}}\n    '''\n    return cls(data[\"name\"], data[\"amount\"], data[\"unit\"], data[\"desc\"], data[\"gwp\"], data[\"density\"])\n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.ghggas.GHGGas.to_tonnes","title":"<code>to_tonnes()</code>","text":"<p>Convert to metric tonnes</p> Source code in <code>src\\ghgpy\\datamodel\\ghggas.py</code> <pre><code>def to_tonnes(self):\n    '''\n    Convert to metric tonnes\n    '''\n    if self.data.unit in weigh_units.units:\n        return weigh_units.convert(self.data.amount, self.data.unit, 'tonne')\n    if self.data.unit in volume_units.units:\n        if self.data.density == None:\n            return None\n        else:\n            return volume_units.convert(self.data.amount, self.data.unit, 'm3')*self.data.density/1000\n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.unit_converters.energy_units","title":"<code>energy_units</code>","text":"<p>Convert between difference energy units</p> Source code in <code>src\\ghgpy\\datamodel\\unit_converters.py</code> <pre><code>class energy_units:\n    \"\"\"\n    Convert between difference energy units\n    \"\"\"\n    units = ['j', 'kj', 'mj', 'tj', 'gj', 'Tj']\n    @staticmethod\n    def convert(val: float, unit_in: str, unit_out: str) -&gt; float:\n        SI = {'j': 1.0, 'kj': 1000.0, 'mj': 1.0*10**6, 'gj': 1.0*10**9, 'tj': 1.0*10**12}\n        return val * SI[unit_in] / SI[unit_out]\n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.unit_converters.volume_units","title":"<code>volume_units</code>","text":"<p>Convert between difference volume units</p> Source code in <code>src\\ghgpy\\datamodel\\unit_converters.py</code> <pre><code>class volume_units:\n    \"\"\"\n    Convert between difference volume units\n    \"\"\"\n    units = ['litre', 'l', 'm3']\n    @staticmethod\n    def convert(val: float, unit_in: str, unit_out: str) -&gt; float:\n        SI = {'litre': 1.0, 'l': 1.0, 'm3': 1000.0}\n        return val * SI[unit_in] / SI[unit_out]\n</code></pre>"},{"location":"reference/#src.ghgpy.datamodel.unit_converters.weigh_units","title":"<code>weigh_units</code>","text":"<p>Convert between difference weigh units</p> Source code in <code>src\\ghgpy\\datamodel\\unit_converters.py</code> <pre><code>class weigh_units:\n    \"\"\"\n    Convert between difference weigh units\n    \"\"\"\n    units = ['g', 'kg', 'tonne', 'Gg']\n    @staticmethod\n    def convert(val: float, unit_in: str, unit_out: str) -&gt; float:\n        SI = {'g': 1.0, 'kg': 1000.0, 'tonne': 1.0*10**6, 'tonnes': 1.0*10**6, 'Gg': 1.0*10**9}\n        return val * SI[unit_in] / SI[unit_out]\n</code></pre>"}]}